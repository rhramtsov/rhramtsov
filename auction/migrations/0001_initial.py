# Generated by Django 4.2.4 on 2023-08-14 18:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(help_text='User address', max_length=100, verbose_name='Address')),
                ('is_collector', models.BooleanField(default=True, help_text='True if user is a collector, False if admin.', verbose_name='Is Collector')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ArtPiece',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the art piece', max_length=50, verbose_name='Art Piece Name')),
                ('is_sold', models.BooleanField(default=False, help_text='True if the art piece has been sold.', verbose_name='Is Sold')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the art piece.', max_digits=10, null=True, verbose_name='Price')),
                ('minimum_price', models.DecimalField(blank=True, decimal_places=2, help_text='The minimum price of the art piece.', max_digits=10, null=True, verbose_name='Minimum Price')),
                ('collector', models.ForeignKey(blank=True, help_text='The collector who owns this art piece.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Collector')),
            ],
        ),
        migrations.CreateModel(
            name='Auction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the auction.', max_length=50, verbose_name='Auction Name')),
                ('winning_bid', models.DecimalField(blank=True, decimal_places=2, help_text='The highest bid in the auction.', max_digits=10, null=True, verbose_name='Winning Bid')),
                ('is_active', models.BooleanField(default=False, help_text='True if the auction is active, False otherwise.', verbose_name='Is Active')),
                ('art_pieces', models.ManyToManyField(help_text='Art pieces included in this auction.', to='auction.artpiece', verbose_name='Art Pieces')),
                ('winning_collector', models.ForeignKey(blank=True, help_text='The collector who won the auction.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Winning Collector')),
            ],
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount of the bid.', max_digits=10, verbose_name='Bid Amount')),
                ('art_piece', models.ForeignKey(help_text='The art piece the bid was made for.', on_delete=django.db.models.deletion.CASCADE, to='auction.artpiece', verbose_name='Bid Art Piece')),
                ('auction', models.ForeignKey(help_text='The auction the bid was made in.', on_delete=django.db.models.deletion.CASCADE, to='auction.auction', verbose_name='Auction')),
                ('collector', models.ForeignKey(help_text='The collector who made this bid.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Bid Collector')),
            ],
        ),
        migrations.CreateModel(
            name='ArtPieceVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='art_videos/')),
                ('art_piece', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='auction.artpiece')),
            ],
        ),
        migrations.CreateModel(
            name='ArtPieceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.ImageField(blank=True, null=True, upload_to='art_pieces/')),
                ('art_piece', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artpiece_images', to='auction.artpiece')),
            ],
        ),
    ]
